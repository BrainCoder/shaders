// Made by Okarin (Hackalot)

// 2D Noise function by:
// By Morgan McGuire @morgan3d, http://graphicscodex.com
// Reuse permitted under the BSD license.

float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }
float hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }


float noise(vec2 x) {
    vec2 i = floor(x);
    vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

float stacknoiselayer(vec2 fragCoord, float size, int layers)
{
    float ret = 0.0;
    float layersize = size;
    for(int i=0; i<layers; i++)
    {
        vec2 coord = fragCoord.xy * layersize - vec2(iResolution.y / 4.0, iTime * (float(i) - 1.0));//vec2(iTime * 2.0, iResolution.y / 4.0);
        ret += noise(coord);
        layersize = layersize + layersize;
    }
    return ret/float(layers);
}

float band(float x, float minx, float maxx)
{
    return (x > minx && x < maxx)?1.0:0.0;
}

vec3 applycolor(float image, vec3 color)
{
    return vec3(color.r * image,color.g * image,color.b * image);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 screen;
    float v = 0.0;

    v = stacknoiselayer(fragCoord, 0.005, 3);

    vec3 color_1 = vec3(0.933, 0.98, 0.145);
	vec3 color_2 = vec3(0.965, 0.38, 0.078);
	vec3 color_3 = vec3(0.969, 0.271, 0.667);
	vec3 color_4 = vec3(0.231, 0.898, 0.306);
	vec3 color_5 = vec3(0.22, 0.576, 0.784);
    vec3 color_6 = vec3(0.933, 0.22, 0.157);
    vec3 color_7 = vec3(0.627, 0, 0.682);

    // Output to screen
    for(float i=0.0; i<42.0; i++)
    {
        vec3 color = vec3(0.0, 0.0, 0.0);
        color += color_1 * abs(step(step(0.0,i), step(10.0,i)) - 1.0);
        color += color_2 * abs(step(step(10.0,i), step(16.0,i)) - 1.0);
        color += color_3 * abs(step(step(16.0,i), step(20.0,i)) - 1.0);
        color += color_4 * abs(step(step(20.0,i), step(26.0,i)) - 1.0);
        color += color_5 * abs(step(step(26.0,i), step(32.0,i)) - 1.0);
        color += color_6 * abs(step(step(32.0,i), step(38.0,i)) - 1.0);
        color += color_7 * abs(step(step(38.0,i), step(42.0,i)) - 1.0);

        screen += applycolor(band(v, 0.02*i, 0.0204*i), color);
        //screen += band(v, 0.02*i, 0.0204*i); // black and white bands
    }

    //screen += vec3(v); //Noise only

    fragColor.rgb = screen;
}
